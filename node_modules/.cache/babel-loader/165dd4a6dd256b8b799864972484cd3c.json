{"ast":null,"code":"import React, { useState } from \"react\";\n\nconst ws_init = function () {\n  const ws = new WebSocket(\"wss://ftx.com/ws/\");\n\n  ws.onopen = function () {\n    for (var s of symbols) {\n      ws.send(`{\"op\": \"subscribe\", \"channel\": \"trades\", \"market\": \"${s}\"}`);\n    }\n  };\n\n  ws.onclose = function () {\n    setTimeout(ws_init, 5000);\n  };\n\n  ws.onerror = function (error) {\n    console.log('WS error: ' + error);\n  };\n\n  ws.onmessage = function (e) {\n    let data = JSON.parse(e.data);\n\n    if (data.channel == \"trades\" && data.type == \"update\") {\n      getTrades(data);\n    } else if (data.channel == \"orderbook\" && data.type == \"update\") {\n      getOrderBook(data);\n    }\n  };\n\n  const ping = function () {\n    ws.send('{\"op\":\"ping\"}');\n  };\n\n  setInterval(ping, 10000);\n};\n\nvar trades = null;\nvar orderBook = null;\nconst session = null;\n\nconst getTrades = function (data) {\n  trades = data.data[0];\n};\n\nconst getOrderBook = function (data) {\n  orderBook = data.data;\n};\n\nsession = ws_init();\nexport { session, trades, orderBook };","map":{"version":3,"names":["React","useState","ws_init","ws","WebSocket","onopen","s","symbols","send","onclose","setTimeout","onerror","error","console","log","onmessage","e","data","JSON","parse","channel","type","getTrades","getOrderBook","ping","setInterval","trades","orderBook","session"],"sources":["/Users/alejandroballesteros/Documents/GitHub/ftx-autospreader/src/components/session.js"],"sourcesContent":["import React, { useState } from \"react\";\n\n\nconst ws_init = function () {\n    const ws = new WebSocket(\"wss://ftx.com/ws/\");\n\n    ws.onopen = function () {\n        for (var s of symbols) {\n            ws.send(`{\"op\": \"subscribe\", \"channel\": \"trades\", \"market\": \"${s}\"}`);\n        }\n    };\n\n    ws.onclose = function () {\n        setTimeout(ws_init, 5000);\n    };\n\n    ws.onerror = function (error) {\n        console.log('WS error: ' + error);\n    };\n\n    ws.onmessage = function (e) {\n        let data = JSON.parse(e.data);\n        if (data.channel == \"trades\" && data.type == \"update\") {\n            getTrades(data);\n        }else if (data.channel == \"orderbook\" && data.type == \"update\"){\n            getOrderBook(data);\n        }\n    };\n\n    const ping = function () {\n        ws.send('{\"op\":\"ping\"}');\n    };\n    setInterval(ping, 10000);\n}\n\nvar trades = null;\nvar orderBook = null;\nconst session = null;\n\nconst getTrades = function (data) {\n    trades = data.data[0];\n}\n\nconst getOrderBook = function (data) {\n    orderBook = data.data;\n}\nsession = ws_init();\n\nexport {session, trades, orderBook};"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAGA,MAAMC,OAAO,GAAG,YAAY;EACxB,MAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAc,mBAAd,CAAX;;EAEAD,EAAE,CAACE,MAAH,GAAY,YAAY;IACpB,KAAK,IAAIC,CAAT,IAAcC,OAAd,EAAuB;MACnBJ,EAAE,CAACK,IAAH,CAAS,uDAAsDF,CAAE,IAAjE;IACH;EACJ,CAJD;;EAMAH,EAAE,CAACM,OAAH,GAAa,YAAY;IACrBC,UAAU,CAACR,OAAD,EAAU,IAAV,CAAV;EACH,CAFD;;EAIAC,EAAE,CAACQ,OAAH,GAAa,UAAUC,KAAV,EAAiB;IAC1BC,OAAO,CAACC,GAAR,CAAY,eAAeF,KAA3B;EACH,CAFD;;EAIAT,EAAE,CAACY,SAAH,GAAe,UAAUC,CAAV,EAAa;IACxB,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACC,IAAb,CAAX;;IACA,IAAIA,IAAI,CAACG,OAAL,IAAgB,QAAhB,IAA4BH,IAAI,CAACI,IAAL,IAAa,QAA7C,EAAuD;MACnDC,SAAS,CAACL,IAAD,CAAT;IACH,CAFD,MAEM,IAAIA,IAAI,CAACG,OAAL,IAAgB,WAAhB,IAA+BH,IAAI,CAACI,IAAL,IAAa,QAAhD,EAAyD;MAC3DE,YAAY,CAACN,IAAD,CAAZ;IACH;EACJ,CAPD;;EASA,MAAMO,IAAI,GAAG,YAAY;IACrBrB,EAAE,CAACK,IAAH,CAAQ,eAAR;EACH,CAFD;;EAGAiB,WAAW,CAACD,IAAD,EAAO,KAAP,CAAX;AACH,CA9BD;;AAgCA,IAAIE,MAAM,GAAG,IAAb;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,MAAMC,OAAO,GAAG,IAAhB;;AAEA,MAAMN,SAAS,GAAG,UAAUL,IAAV,EAAgB;EAC9BS,MAAM,GAAGT,IAAI,CAACA,IAAL,CAAU,CAAV,CAAT;AACH,CAFD;;AAIA,MAAMM,YAAY,GAAG,UAAUN,IAAV,EAAgB;EACjCU,SAAS,GAAGV,IAAI,CAACA,IAAjB;AACH,CAFD;;AAGAW,OAAO,GAAG1B,OAAO,EAAjB;AAEA,SAAQ0B,OAAR,EAAiBF,MAAjB,EAAyBC,SAAzB"},"metadata":{},"sourceType":"module"}